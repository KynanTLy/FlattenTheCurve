{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","process","App","mapboxElRef","useRef","useState","selectedMunDetail","setselectedMunDetail","covidMapJSON","returnObj","idMap","i","municipality","length","y","albertaCaseDataM2","properties","LOCAL_NAME","local_geographic_area","toUpperCase","Object","assign","push","mergeAlbertaCases","legendCaseRange","data","caseList","map","region","cases","forEach","item","Math","ceil","sort","a","b","minRange","Set","quartRange","halfRange","quarter3Range","maxRange","floor","findLegendRange","legendColourRange","legendBuilder","legend","municipalitytest","coordinatesList","first","last","p1","p2","f","twicearea","x","numPoints","j","find_center_point","geometry","coordinates","useEffect","Map","container","current","style","center","LngLat","convert","zoom","once","oldhoverMunID","addSource","type","features","addLayer","id","source","paint","on","e","hoverMunID","activeCase","active","recoverCase","isNaN","recovered","toFixed","mortalityRate","death_s","hopsitalMarkerList","outbreakMarkerList","hospitalFilter","document","getElementById","hospitalToggle","addEventListener","remove","hospitalData","marker","el","createElement","className","tempMarker","Marker","setLngLat","setPopup","Popup","offset","setHTML","NAME","maskAmount","addTo","OutbreakFilter","OutbreakToggle","outbreakData","TYPEFACILITY","nav","NavigationControl","addControl","ref","Parser","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f307162d.chunk.js","sourcesContent":["// Imports\nimport React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport Parser from 'html-react-parser'\n\nimport \"./App.scss\";\n// Mapbox css - needed to make tooltips work later in this article\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Data Import \nimport * as municipality from './data/municipality.json'\nimport * as albertaCaseDataM from './data/AlbertaCOVIDbyMunicipality.json'\nimport * as albertaCaseDataM2 from './data/AlbertaCOVIDCase.json'\n\nimport * as municipalitytest from './data/municipality.json'\nimport * as hospitalData from \"./data/alberta-hospitals.json\"\nimport * as outbreakData from \"./data/alberta-outbreak.json\"\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n\nfunction find_center_point(coordinatesList) {\n\n  // Check for nested Coordinates and flatten them\n  if (coordinatesList[0].length !== 2){\n    coordinatesList = coordinatesList[0]\n  }\n\n  var first = coordinatesList[0] \n  //console.log(`First: ${first}`)\n\n\n  var last = coordinatesList[coordinatesList.length - 1]\n  if (first[0] != last[0] || first[1] != last[1]) coordinatesList.push(first);\n  var twicearea =0\n  var x = 0\n  var y = 0 \n  var numPoints = coordinatesList.length\n  var p1, p2, f;\n  //console.log(`${twicearea} ${x} ${y}`)\n  for ( var i=0, j=numPoints-1 ; i<numPoints ; j=i++ ) {\n     p1 = coordinatesList[i]; p2 = coordinatesList[j];\n     //console.log(`p1: ${p1} p2: ${p2}`)\n     f = (p1[1] - first[1]) * (p2[0] - first[0]) - (p2[1] - first[1]) * (p1[0] - first[0]);\n     twicearea += f;\n     x += (p1[0] + p2[0] - 2 * first[0]) * f;\n     y += (p1[1] + p2[1] - 2 * first[1]) * f;\n  }\n  f = twicearea * 3;\n  //console.log(`x: ${x} y: ${y} f: ${f}`)\n  var returnJSON = {\"center_point\":[(x/f + first[0]), (y/f + first[1])]}\n  //console.log((returnJSON['center_point']))\n  return returnJSON\n}\n\nfunction mergeAlbertaCases(){\n\n  var returnObj = {\"data\":[]}\n  var idMap = {};\n  // Iterate over arguments\n  for(var i = 0; i < municipality.data.length; i++) { \n    //\n    for (var y = 0; y < albertaCaseDataM2.default.length; y++){\n      \n      if (municipality.data[i].properties.LOCAL_NAME === albertaCaseDataM2.default[y].local_geographic_area.toUpperCase()){\n        //console.log(`\"${municipality.data[i].properties.LOCAL_NAME}\" and \"${albertaCaseDataM.default[y].local_geographic_area.toUpperCase()}\"`)\n        idMap = municipality.data[i]\n        idMap['properties'] = Object.assign(idMap['properties'],albertaCaseDataM2.default[y])\n        returnObj['data'].push(idMap)\n        idMap = {}\n      }\n      \n    }\n  }\n  //console.log(municipality.data.length)\n  //console.log(returnObj['data'].length)\n  return returnObj\n}\n\nfunction findLegendRange(data){\n  //console.log(caseList.properties)\n  var caseList = []\n  data.map((region) => (caseList.push(region.properties.cases)))\n  //console.log(`List: ${Math.max(...caseList)}`)\n \n  \n  caseList.forEach(function(item, i) {\n    caseList[i] = Math.ceil(item / 10) * 10;\n  });\n  caseList.sort(function(a, b){return a-b})\n  caseList = [...new Set(caseList)]\n  var minRange = caseList[0]\n  var quartRange = caseList[Math.ceil((caseList.length-1)/4)]\n  var halfRange = caseList[(Math.ceil((caseList.length-1)/2))]\n  var quarter3Range = caseList[Math.ceil((caseList.length-1)/4)*3]\n  var maxRange = Math.floor(caseList[caseList.length-1] / 50) * 50\n  return [\n    `${minRange}-${quartRange-1}`, \n    `${quartRange}-${halfRange-1}`,\n    `${halfRange}-${quarter3Range-1}`,\n    `${quarter3Range}-${maxRange-1}`,\n    `${maxRange}+`\n  ]\n}\n\nfunction App() {\n  // Map visualization reference\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  // Use States\n  const [selectedMunDetail, setselectedMunDetail] = useState('')\n\n  // Update location data with newest COVID data\n  const covidMapJSON = mergeAlbertaCases()\n\n  // Legend Information\n  var legendCaseRange = findLegendRange(covidMapJSON.data)\n  var legendColourRange = ['#ffffb2','#feb24c','#fc4e2a','#fc4e2a','#b10026'] \n  var legendBuilder = '<h4>Active COVID Case</h4>'\n  for (var i = 0; i < legendCaseRange.length; i++){\n    legendBuilder = legendBuilder + `<div><span style=\"background-color:${legendColourRange[i]};\"></span>${legendCaseRange[i]}</div>`\n  }\n  //console.log(legendBuilder)\n  const legend = legendBuilder\n  municipalitytest.data.map((data) => (\n    data['properties'] = Object.assign(data['properties'],find_center_point(data.geometry.coordinates[0]))\n  ))\n\n  // Initialize our map\n  useEffect(() => {\n    // You can store the map instance with useRef too\n    const map = new mapboxgl.Map({\n      container: mapboxElRef.current,\n      style: \"mapbox://styles/kynantly/ck94r7t9m0e7b1iqpq4y20drq\",\n      center: new mapboxgl.LngLat.convert([-114.066666,51.049999]), // initial geo location\n      zoom: 10 // initial zoom\n    });\n\n    // When map is loaded \n    map.once(\"load\", function() {\n      // Add our SOURCE\n      // with id \"points\"\n      map.addSource(\"municipality\", {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: municipality.data\n        }\n      })\n\n      map.addSource(\"municipalityCOVID\", {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: covidMapJSON.data\n        }\n      })\n\n      // Add municipality Border\n      map.addLayer({\n        id: \"municipalityBorder\",\n        source: \"municipality\", // this should be the id of the source\n        type: \"line\",\n        // paint properties\n        paint: {\n          'line-color' : '#2d03ff',\n          'line-opacity': 0.7\n        }\n      })\n\n      // Add our layer\n      map.addLayer({\n        id: \"municipalityCOVID\",\n        source: \"municipalityCOVID\", // this should be the id of the source\n        type: \"fill\",\n        // paint properties\n        paint: {\n          'fill-color' : [\n            \"interpolate\",\n            [\"linear\"],\n            [\"get\", \"active\"],\n            1, \"#ffffb2\",\n            5, '#feb24c',\n            50, '#fc4e2a',\n            100, '#b10026'\n          ],\n          'fill-opacity': [\n            \"interpolate\",\n            [\"linear\"],\n            [\"get\", \"active\"],\n            0, 0,\n            5, 0.2,\n            50, 0.4,\n            100, 0.7\n          ]\n        }\n      })\n\n      // Municipality Name\n      let oldhoverMunID\n      \n      // Mouse move event\n      map.on(\"mousemove\", \"municipalityCOVID\", e => {\n\n          // Get ID\n        const hoverMunID = e.features[0].properties.local_geographic_area;\n        \n        // Prevent Repeats\n        if (hoverMunID !== oldhoverMunID) {\n          // Set new ID\n          oldhoverMunID = hoverMunID;\n        \n          // Properties to display\n          const activeCase  = e.features[0].properties.active\n          const recoverCase = isNaN(((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)\n          const mortalityRate = isNaN(((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)\n\n          // Display to municipality detail screen\n          setselectedMunDetail(`\n                <p>Location: ${hoverMunID}</p>\n                <p>Active: <b>${activeCase}</b></p>\n                <p>Recovery  Rate: <b>${recoverCase}%</b></p>\n                <p>Mortality Rate: <b>${mortalityRate}%</b></p>\n                `)\n        \n      }//end hover\n      })//end Mouse Event \n\n      // List of Markers\n      var hopsitalMarkerList = []\n      var outbreakMarkerList = []\n\n      var hospitalFilter = document.getElementById(\"hospitalfilter\")\n      var hospitalToggle = false \n      hospitalFilter.addEventListener('change', function(e) {\n        \n        if (hospitalToggle === true){\n          if (hopsitalMarkerList.length !== 0){\n            for(var i = 0; i < hopsitalMarkerList.length; i++){\n              hopsitalMarkerList[i].remove()\n            }\n            hopsitalMarkerList = []\n          }\n          hospitalToggle = false\n        } else {\n          hospitalData.hospitals.forEach(function(marker) {\n\n            // create a HTML element for each feature\n            var el = document.createElement('div')\n            el.className = 'markerHospital'\n            el.id = 'hospital'\n    \n            // make a marker for each feature and add to the map\n            var tempMarker = new mapboxgl.Marker(el)\n              .setLngLat(marker.geometry.coordinates)\n              .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n                .setHTML(`<h3> ${marker.properties.NAME} </h3><p> ${marker.properties.maskAmount} </p>`))\n              .addTo(map)\n              \n            tempMarker.addTo(map)\n            hopsitalMarkerList.push(tempMarker)\n          })//end forEach hospital\n          hospitalToggle = true\n        }\n        \n      }) // end Hospital Marker\n\n      var OutbreakFilter = document.getElementById(\"outbreakfilter\")\n      var OutbreakToggle = false \n      OutbreakFilter.addEventListener('change', function(e) {\n        \n        if (OutbreakToggle === true){\n          if (outbreakMarkerList.length !== 0){\n            for(var i = 0; i < outbreakMarkerList.length; i++){\n              outbreakMarkerList[i].remove()\n            }\n            outbreakMarkerList = []\n          }\n          OutbreakToggle = false\n        } else {\n          outbreakData.outbreak.forEach(function(marker) {\n\n            // create a HTML element for each feature\n            var el = document.createElement('div')\n            el.className = 'markerOutbreak'\n            el.id = 'outbreak'\n    \n            // make a marker for each feature and add to the map\n            var tempMarker = new mapboxgl.Marker(el)\n              .setLngLat(marker.geometry.coordinates)\n              .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n                .setHTML(`<h3> ${marker.properties.NAME} </h3><p> ${marker.properties.TYPEFACILITY} </p>`))\n              .addTo(map)\n              \n            tempMarker.addTo(map)\n            outbreakMarkerList.push(tempMarker)\n          })//end forEach hospital\n          OutbreakToggle = true\n        }\n        \n      }) // end Hospital Marker\n\n    })//end map.on load\n    \n    \n    // Add navigation controls to the top right of the canvas\n   \n    var nav = new mapboxgl.NavigationControl();\n    map.addControl(nav, 'bottom-left');\n  }, [])// End use effect\n\n  //console.log(selectedMunDetail)\n  return (\n    <div className=\"App\">\n      <div className=\"mapContainer\">\n        {/* Assigned Mapbox container */}\n        <div className=\"mapBox\" ref={mapboxElRef} />\n      </div>\n      <div className=\"information\">\n        <div className=\"map-overlay\" id='features'>\n          <h2>COVID Statistics</h2>\n          {Parser(selectedMunDetail)}\n        </div>\n        <div className=\"legend\">\n          {Parser(legend)}\n        </div>\n      </div>\n      <nav className=\"filter-group\">\n        <input type=\"checkbox\" id=\"hospitalfilter\"></input>\n        <label htmlFor=\"hospitalfilter\">Hospital</label>\n        <input type=\"checkbox\" id=\"outbreakfilter\"></input>\n        <label htmlFor=\"outbreakfilter\">Outbreak</label>\n      </nav>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}