{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","process","dataList","albertaCaseDataM2","testing","dates","mergeAlbertaCases","albertaCaseData","returnObj","idMap","i","municipality","length","y","default","properties","LOCAL_NAME","local_geographic_area","toUpperCase","Object","assign","push","legendBuild","CovidData","legendCaseRange","data","caseList","map","region","cases","forEach","item","Math","ceil","sort","a","b","minRange","Set","quartRange","halfRange","quarter3Range","maxRange","floor","findLegendRange","legendColourRange","legendBuilder","filterBy","App","mapboxElRef","useRef","useState","selectedMunDetail","setselectedMunDetail","selectedLegDetail","setselectedLegDetail","coordinatesList","first","last","p1","p2","f","twicearea","x","numPoints","j","find_center_point","geometry","coordinates","useEffect","initMap","Map","container","current","style","center","LngLat","convert","zoom","once","console","log","addSource","type","features","addLayer","id","source","paint","tempString","oldhoverMunID","on","e","hoverMunID","activeCase","active","recoverCase","isNaN","recovered","toFixed","mortalityRate","death_s","hopsitalMarkerList","outbreakMarkerList","hospitalFilter","document","getElementById","hospitalToggle","addEventListener","remove","hospitalData","marker","el","createElement","className","tempMarker","Marker","setLngLat","setPopup","Popup","offset","setHTML","NAME","maskAmount","addTo","OutbreakFilter","OutbreakToggle","outbreakData","TYPEFACILITY","dateTarget","parseInt","target","value","textContent","setLayoutProperty","nav","NavigationControl","addControl","ref","Parser","min","max","step","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17d67b9c.chunk.js","sourcesContent":["// Imports\nimport React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport Parser from 'html-react-parser'\n\nimport \"./App.scss\";\n// Mapbox css - needed to make tooltips work later in this article\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Data Import \nimport * as municipality from './data/municipality.json'\nimport * as albertaCaseDataM from './data/AlbertaCOVIDbyMunicipality.json'\nimport * as albertaCaseDataM2 from './data/AlbertaCOVIDCase.json'\nimport * as testing from './data/AlbertaCOVID-M-May6.json'\n\nimport * as hospitalData from \"./data/alberta-hospitals.json\"\nimport * as outbreakData from \"./data/alberta-outbreak.json\"\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n\nconst dataList = [\n  albertaCaseDataM2,\n  testing\n]\n\nconst dates = [\n  \"April_29\",\n  \"May_6\"\n]\n\n\nfunction find_center_point(coordinatesList) {\n\n  // Check for nested Coordinates and flatten them\n  if (coordinatesList[0].length !== 2){\n    coordinatesList = coordinatesList[0]\n  }\n\n  var first = coordinatesList[0] \n  //console.log(`First: ${first}`)\n\n\n  var last = coordinatesList[coordinatesList.length - 1]\n  if (first[0] != last[0] || first[1] != last[1]) coordinatesList.push(first);\n  var twicearea =0\n  var x = 0\n  var y = 0 \n  var numPoints = coordinatesList.length\n  var p1, p2, f;\n  //console.log(`${twicearea} ${x} ${y}`)\n  for ( var i=0, j=numPoints-1 ; i<numPoints ; j=i++ ) {\n     p1 = coordinatesList[i]; p2 = coordinatesList[j];\n     //console.log(`p1: ${p1} p2: ${p2}`)\n     f = (p1[1] - first[1]) * (p2[0] - first[0]) - (p2[1] - first[1]) * (p1[0] - first[0]);\n     twicearea += f;\n     x += (p1[0] + p2[0] - 2 * first[0]) * f;\n     y += (p1[1] + p2[1] - 2 * first[1]) * f;\n  }\n  f = twicearea * 3;\n  //console.log(`x: ${x} y: ${y} f: ${f}`)\n  var returnJSON = {\"center_point\":[(x/f + first[0]), (y/f + first[1])]}\n  //console.log((returnJSON['center_point']))\n  return returnJSON\n}\n\nfunction mergeAlbertaCases(albertaCaseData){\n\n  var returnObj = {\"data\":[]}\n  var idMap = {};\n  // Iterate over arguments\n  for(var i = 0; i < municipality.data.length; i++) { \n    //\n    for (var y = 0; y < albertaCaseData.default.length; y++){\n      \n      if (municipality.data[i].properties.LOCAL_NAME === albertaCaseData.default[y].local_geographic_area.toUpperCase()){\n        //console.log(`\"${municipality.data[i].properties.LOCAL_NAME}\" and \"${albertaCaseDataM.default[y].local_geographic_area.toUpperCase()}\"`)\n        idMap = municipality.data[i]\n        idMap['properties'] = Object.assign(idMap['properties'],albertaCaseData.default[y])\n        returnObj['data'].push(idMap)\n        idMap = {}\n      }\n      \n    }\n  }\n  //console.log(municipality.data.length)\n  //console.log(returnObj['data'].length)\n  return returnObj\n}\n\nfunction findLegendRange(data){\n  //console.log(caseList.properties)\n  var caseList = []\n  data.map((region) => (caseList.push(region.properties.cases)))\n  //console.log(`List: ${Math.max(...caseList)}`)\n \n  \n  caseList.forEach(function(item, i) {\n    caseList[i] = Math.ceil(item / 10) * 10;\n  });\n  caseList.sort(function(a, b){return a-b})\n  caseList = [...new Set(caseList)]\n  var minRange = caseList[0]\n  var quartRange = caseList[Math.ceil((caseList.length-1)/4)]\n  var halfRange = caseList[(Math.ceil((caseList.length-1)/2))]\n  var quarter3Range = caseList[Math.ceil((caseList.length-1)/4)*3]\n  var maxRange = Math.floor(caseList[caseList.length-1] / 50) * 50\n  return [\n    `${minRange}-${quartRange-1}`, \n    `${quartRange}-${halfRange-1}`,\n    `${halfRange}-${quarter3Range-1}`,\n    `${quarter3Range}-${maxRange-1}`,\n    `${maxRange}+`\n  ]\n}\n\nfunction legendBuild(CovidData){\n  var legendCaseRange = findLegendRange(CovidData)\n  var legendColourRange = ['#ffffb2','#feb24c','#fc4e2a','#fc4e2a','#b10026'] \n  var legendBuilder = '<h4>Active COVID Case</h4>'\n\n  for (var i = 0; i < legendCaseRange.length; i++){\n    legendBuilder = legendBuilder + `<div><span style=\"background-color:${legendColourRange[i]};\"></span>${legendCaseRange[i]}</div>`\n  }\n\n  return legendBuilder\n}\n\nfunction filterBy(dates) {\n  if (dates === 1){\n    return mergeAlbertaCases(dataList[1])\n  } else {\n    return mergeAlbertaCases(dataList[0])\n  }\n}\n\nfunction App() {\n  // Map visualization reference\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  // Use States\n  const [selectedMunDetail, setselectedMunDetail] = useState('')\n  const [selectedLegDetail, setselectedLegDetail] = useState('')\n\n  // Update location data with newest COVID data\n  const covidMapJSON = mergeAlbertaCases(albertaCaseDataM2)\n\n \n\n  // Legend Information\n  /*\n  var legendCaseRange = findLegendRange(covidMapJSON.data)\n  var legendColourRange = ['#ffffb2','#feb24c','#fc4e2a','#fc4e2a','#b10026'] \n  var legendBuilder = '<h4>Active COVID Case</h4>'\n  for (var i = 0; i < legendCaseRange.length; i++){\n    legendBuilder = legendBuilder + `<div><span style=\"background-color:${legendColourRange[i]};\"></span>${legendCaseRange[i]}</div>`\n  }\n \n  //console.log(legendBuilder)\n  const legend = legendBuild(covidMapJSON.data)\n  */\n\n  municipality.data.map((data) => (\n    data['properties'] = Object.assign(data['properties'],find_center_point(data.geometry.coordinates[0]))\n  ))\n\n  // Initialize our map\n  useEffect(() => {\n    var initMap = null\n    // You can store the map instance with useRef too\n    const map = new mapboxgl.Map({\n      container: mapboxElRef.current,\n      style: \"mapbox://styles/kynantly/ck94r7t9m0e7b1iqpq4y20drq\",\n      center: new mapboxgl.LngLat.convert([-114.066666,51.049999]), // initial geo location\n      zoom: 10 // initial zoom\n    });\n    \n    // When map is loaded \n    map.once(\"load\", function() {\n      console.log(`initmap ${selectedLegDetail}`)\n      // Add our SOURCE\n      // with id \"points\"\n      map.addSource(\"municipality\", {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: municipality.data\n        }\n      })\n      // Add municipality Border\n      map.addLayer({\n        id: \"municipalityBorder\",\n        source: \"municipality\", // this should be the id of the source\n        type: \"line\",\n        // paint properties\n        paint: {\n          'line-color' : '#2d03ff',\n          'line-opacity': 0.7\n        }\n      })\n\n      for (var i = 0; i < dataList.length; i++){\n        var tempString = \"AlbertaCOVID-\" + dates[i]\n        console.log(tempString)\n        map.addSource(tempString, {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: mergeAlbertaCases(dataList[i]).data\n          }\n        })\n  \n        map.addLayer({\n          id: tempString,\n          source: tempString, // this should be the id of the source\n          type: \"fill\",\n          'layout': {\n            // make layer visible by default\n            'visibility': 'none'\n            },\n          // paint properties\n          paint: {\n            'fill-color' : [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"active\"],\n              1, \"#ffffb2\",\n              5, '#feb24c',\n              50, '#fc4e2a',\n              100, '#b10026'\n            ],\n            'fill-opacity': [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"active\"],\n              0, 0,\n              5, 0.2,\n              50, 0.4,\n              100, 0.7\n            ]\n          }\n        })\n      \n  \n      }\n\n      // Add our layer\n\n      // Municipality Name\n      let oldhoverMunID\n      \n      // Mouse move event\n      map.on(\"mousemove\", \"AlbertaCOVID-April_29\", e => {\n          // Get ID\n        const hoverMunID = e.features[0].properties.local_geographic_area;\n        \n        // Prevent Repeats\n        if (hoverMunID !== oldhoverMunID) {\n          // Set new ID\n          oldhoverMunID = hoverMunID;\n        \n          // Properties to display\n          const activeCase  = e.features[0].properties.active\n          const recoverCase = isNaN(((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)\n          const mortalityRate = isNaN(((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)\n\n          // Display to municipality detail screen\n          setselectedMunDetail(`\n                <p>Local Geographical Location: ${hoverMunID}</p>\n                <p>Current Active Case: <b>${activeCase}</b></p>\n                <p>Recovery Rate (out of ${e.features[0].properties.cases}): <b>${recoverCase}%</b></p>\n                <p>Mortality Rate (out of ${e.features[0].properties.cases}): <b>${mortalityRate}%</b></p>\n                `)\n        \n      }//end hover\n      })//end Mouse Event \n\n      map.on(\"mousemove\", \"AlbertaCOVID-May_6\", e => {\n        // Get ID\n      const hoverMunID = e.features[0].properties.local_geographic_area;\n      \n      // Prevent Repeats\n      if (hoverMunID !== oldhoverMunID) {\n        // Set new ID\n        oldhoverMunID = hoverMunID;\n      \n        // Properties to display\n        const activeCase  = e.features[0].properties.active\n        const recoverCase = isNaN(((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)\n        const mortalityRate = isNaN(((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)\n\n        // Display to municipality detail screen\n        setselectedMunDetail(`\n              <p>Local Geographical Location: ${hoverMunID}</p>\n              <p>Current Active Case: <b>${activeCase}</b></p>\n              <p>Recovery Rate (out of ${e.features[0].properties.cases}): <b>${recoverCase}%</b></p>\n              <p>Mortality Rate (out of ${e.features[0].properties.cases}): <b>${mortalityRate}%</b></p>\n              `)\n      \n    }//end hover\n    })//end Mouse Event \n\n      // List of Markers\n      var hopsitalMarkerList = []\n      var outbreakMarkerList = []\n\n      var hospitalFilter = document.getElementById(\"hospitalfilter\")\n      var hospitalToggle = false \n      hospitalFilter.addEventListener('change', function(e) {\n        \n        if (hospitalToggle === true){\n          if (hopsitalMarkerList.length !== 0){\n            for(var i = 0; i < hopsitalMarkerList.length; i++){\n              hopsitalMarkerList[i].remove()\n            }\n            hopsitalMarkerList = []\n          }\n          hospitalToggle = false\n        } else {\n          hospitalData.hospitals.forEach(function(marker) {\n\n            // create a HTML element for each feature\n            var el = document.createElement('div')\n            el.className = 'markerHospital'\n            el.id = 'hospital'\n    \n            // make a marker for each feature and add to the map\n            var tempMarker = new mapboxgl.Marker(el)\n              .setLngLat(marker.geometry.coordinates)\n              .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n                .setHTML(`<h3> ${marker.properties.NAME} </h3><p> Relevant Information ${marker.properties.maskAmount} </p>`))\n              .addTo(map)\n              \n            tempMarker.addTo(map)\n            hopsitalMarkerList.push(tempMarker)\n          })//end forEach hospital\n          hospitalToggle = true\n        }\n        \n      }) // end Hospital Marker\n\n      var OutbreakFilter = document.getElementById(\"outbreakfilter\")\n      var OutbreakToggle = false \n      OutbreakFilter.addEventListener('change', function(e) {\n        \n        if (OutbreakToggle === true){\n          if (outbreakMarkerList.length !== 0){\n            for(var i = 0; i < outbreakMarkerList.length; i++){\n              outbreakMarkerList[i].remove()\n            }\n            outbreakMarkerList = []\n          }\n          OutbreakToggle = false\n        } else {\n          outbreakData.outbreak.forEach(function(marker) {\n\n            // create a HTML element for each feature\n            var el = document.createElement('div')\n            el.className = 'markerOutbreak'\n            el.id = 'outbreak'\n    \n            // make a marker for each feature and add to the map\n            var tempMarker = new mapboxgl.Marker(el)\n              .setLngLat(marker.geometry.coordinates)\n              .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n                .setHTML(`<h3> ${marker.properties.NAME} </h3><p> ${marker.properties.TYPEFACILITY} </p>`))\n              .addTo(map)\n              \n            tempMarker.addTo(map)\n            outbreakMarkerList.push(tempMarker)\n          })//end forEach outbreak\n          OutbreakToggle = true\n        }\n        \n      }) // end Outbreak Marker\n\n      // Add Date slider\n      var sliderFilter = document.getElementById(\"dataslider\")\n\n      sliderFilter.addEventListener('input', function(e) {\n        var dateTarget = parseInt(e.target.value, 10);\n        document.getElementById('filterDate').textContent = dates[dateTarget];\n\n        console.log(`Date: ${dateTarget}`)\n        //console.log(legendBuild(filterBy(month).data))\n        initMap = filterBy(dateTarget)\n\n        for (var i =0; i < dates.length; i++){\n          var tempString = \"AlbertaCOVID-\" + dates[i]\n          if (i === dateTarget){\n            console.log(`This layer ${tempString} is visible`)\n            map.setLayoutProperty(tempString,'visibility','visible');\n          } else {\n            console.log(`This layer ${tempString} is not`)\n            map.setLayoutProperty(tempString,'visibility','none');\n          }\n        }\n        setselectedLegDetail(legendBuild(filterBy(dateTarget).data))\n        console.log(initMap)\n      })\n\n    })//end map.on load\n    \n    \n    // Add navigation controls to the top right of the canvas\n   \n    var nav = new mapboxgl.NavigationControl();\n    map.addControl(nav, 'bottom-left');\n  }, [])// End use effect\n\n  //console.log(selectedMunDetail)\n  return (\n    <div className=\"App\">\n      <div className=\"mapContainer\">\n        {/* Assigned Mapbox container */}\n        <div className=\"mapBox\" ref={mapboxElRef} />\n      </div>\n      <div className=\"information\">\n        <div className=\"map-overlay\" id='features'>\n          <h2>COVID Statistics</h2>\n          {Parser(selectedMunDetail)}\n          <label id=\"filterDate\"></label>\n          <input type=\"range\" id=\"dataslider\" min=\"0\" max=\"1\" step=\"1\"></input>\n        </div>\n        <div className=\"legend\">\n          {Parser(selectedLegDetail)}\n        </div>\n      </div>\n      <nav className=\"filter-group\">\n        <input type=\"checkbox\" id=\"hospitalfilter\"></input>\n        <label htmlFor=\"hospitalfilter\">Hospital</label>\n        <input type=\"checkbox\" id=\"outbreakfilter\"></input>\n        <label htmlFor=\"outbreakfilter\">Outbreak</label>\n      </nav>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}