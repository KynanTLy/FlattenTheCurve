{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","process","MapboxGeocoder","require","dataList","apr29CovidData","may6CovidData","dates","mergeAlbertaCases","albertaCaseData","returnObj","idMap","i","localAreaBound","length","y","default","properties","LOCAL_NAME","local_geographic_area","toUpperCase","Object","assign","push","legendBuild","CovidData","legendCaseRange","data","caseList","map","region","cases","forEach","item","Math","ceil","sort","a","b","minRange","Set","quartRange","halfRange","quarter3Range","maxRange","floor","findLegendRange","legendColourRange","legendBuilder","filterBy","App","mapboxElRef","useRef","useState","selectedMunDetail","setselectedMunDetail","selectedLegDetail","setselectedLegDetail","useEffect","Map","container","current","style","center","LngLat","convert","zoom","geocoder","placeholder","addControl","once","addSource","type","features","addLayer","id","source","paint","tempString","oldhoverMunID","on","e","hoverMunID","activeCase","active","recoverCase","isNaN","recovered","toFixed","mortalityRate","death_s","hopsitalMarkerList","outbreakMarkerList","hospitalFilter","document","getElementById","hospitalToggle","addEventListener","remove","hospitalData","marker","el","createElement","className","tempMarker","Marker","setLngLat","geometry","coordinates","setPopup","Popup","offset","setHTML","NAME","maskAmount","addTo","OutbreakFilter","OutbreakToggle","outbreakData","TYPEFACILITY","dateTarget","parseInt","target","value","textContent","replace","setLayoutProperty","nav","NavigationControl","ref","Parser","min","max","step","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a4697e9f.chunk.js","sourcesContent":["// Imports libraries \nimport React, { useState, useRef, useEffect } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport Parser from 'html-react-parser'\n\n// Imports scss and css files\nimport \"./App.scss\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Data Import location geographical data boundaries \nimport * as localAreaBound from './data/localAreaBound.json'\n\n// Data Import COVID data\nimport * as apr29CovidData from './data/AlbertaCOVID-M-April29.json'\nimport * as may6CovidData from './data/AlbertaCOVID-M-May6.json'\n\n// Data Import filters data\nimport * as hospitalData from \"./data/alberta-hospitals.json\"\nimport * as outbreakData from \"./data/alberta-outbreak.json\"\n\n// Requires your own access token to run\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN\n\n// Geolocator\nconst MapboxGeocoder = require('@mapbox/mapbox-gl-geocoder');\n\n// List of data / dates\n// To be adapted later for API calls from AHS and would requires some cleaners function\nconst dataList = [\n  apr29CovidData,\n  may6CovidData\n]\n\nconst dates = [\n  \"April_29\",\n  \"May_6\"\n]\n\n// Finds center of polygon\n// @param list of coordinates  \nfunction find_center_point(coordinatesList) {\n\n  // Check for nested Coordinates and flatten them\n  if (coordinatesList[0].length !== 2){\n    coordinatesList = coordinatesList[0]\n  }//end if \n\n  var first = coordinatesList[0] \n  var last = coordinatesList[coordinatesList.length - 1]\n\n  // Ensure right hand rule\n  if (first[0] !== last[0] || first[1] !== last[1]) coordinatesList.push(first)\n\n  var twicearea =0\n  var x = 0\n  var y = 0 \n  var numPoints = coordinatesList.length\n  var p1, p2, f;\n  \n  for ( var i=0, j=numPoints-1 ; i<numPoints ; j=i++ ) {\n     p1 = coordinatesList[i]; p2 = coordinatesList[j];\n     f = (p1[1] - first[1]) * (p2[0] - first[0]) - (p2[1] - first[1]) * (p1[0] - first[0]);\n     twicearea += f;\n     x += (p1[0] + p2[0] - 2 * first[0]) * f;\n     y += (p1[1] + p2[1] - 2 * first[1]) * f;\n  }//end for\n\n  f = twicearea * 3;\n  \n  var returnJSON = {\"center_point\":[(x/f + first[0]), (y/f + first[1])]}\n  return returnJSON\n}//end find_center_point function\n\n// Merge JSON of local geographic with COVID data for visualization\n// @param JSON of COVID data\nfunction mergeAlbertaCases(albertaCaseData){\n\n  var returnObj = {\"data\":[]}\n  var idMap = {};\n\n  // Iterate over arguments\n  for(var i = 0; i < localAreaBound.data.length; i++) { \n    for (var y = 0; y < albertaCaseData.default.length; y++){\n      \n      if (localAreaBound.data[i].properties.LOCAL_NAME === albertaCaseData.default[y].local_geographic_area.toUpperCase()){\n        //console.log(`\"${municipality.data[i].properties.LOCAL_NAME}\" and \"${albertaCaseDataM.default[y].local_geographic_area.toUpperCase()}\"`)\n        idMap = localAreaBound.data[i]\n        idMap['properties'] = Object.assign(idMap['properties'],albertaCaseData.default[y])\n        returnObj['data'].push(idMap)\n        idMap = {}\n      }//end if\n      \n    }// end inner for loop\n  }//end out for loop\n\n  return returnObj\n}//end mergeAlbertaCases function\n\n// Adaptive legends that change with COVID data\n// @param COIVD data\nfunction findLegendRange(data){\n  \n  // Add all case data and divide them into 4 ranges\n  var caseList = []\n\n  data.map((region) => (caseList.push(region.properties.cases)))\n  \n  caseList.forEach(function(item, i) {\n    caseList[i] = Math.ceil(item / 10) * 10;\n  });\n\n  caseList.sort(function(a, b){return a-b})\n  caseList = [...new Set(caseList)]\n\n  var minRange = caseList[0]\n  var quartRange = caseList[Math.ceil((caseList.length-1)/4)]\n  var halfRange = caseList[(Math.ceil((caseList.length-1)/2))]\n  var quarter3Range = caseList[Math.ceil((caseList.length-1)/4)*3]\n  var maxRange = Math.floor(caseList[caseList.length-1] / 50) * 50\n  \n  return [\n    `${minRange}-${quartRange-1}`, \n    `${quartRange}-${halfRange-1}`,\n    `${halfRange}-${quarter3Range-1}`,\n    `${quarter3Range}-${maxRange-1}`,\n    `${maxRange}+`\n  ]\n}//end findLegendRange function\n\n// Build the HTML for the legend\n// @param legend range data\nfunction legendBuild(CovidData){\n\n  var legendCaseRange = findLegendRange(CovidData)\n  var legendColourRange = ['#ffffb2','#feb24c','#fc4e2a','#fc4e2a','#b10026'] \n  var legendBuilder = ''\n\n  for (var i = 0; i < legendCaseRange.length; i++){\n    legendBuilder = legendBuilder + `<div><span style=\"background-color:${legendColourRange[i]};\"></span>${legendCaseRange[i]}</div>`\n  }//end for loop\n\n  return legendBuilder\n}//end legendBuild function\n\n// Returns the merge COVID data + boundary depending on the slider\n// Currently basic for proof of concept to expanded later\n// @param slider dates\nfunction filterBy(dates) {\n\n  if (dates === 1){\n    return mergeAlbertaCases(dataList[1])\n  } else {\n    return mergeAlbertaCases(dataList[0])\n  }\n}//end filterBy function\n\n// Main body of the application\nfunction App() {\n\n  // Map visualization reference\n  const mapboxElRef = useRef(null); // DOM element to render map\n\n  // Use States\n  const [selectedMunDetail, setselectedMunDetail] = useState('')\n  const [selectedLegDetail, setselectedLegDetail] = useState('')\n\n  // Add center point to map data\n  // To be used when adding a search feature to the map to center the screen\n  /*\n localAreaBound.data.map((data) => (\n    data['properties'] = Object.assign(data['properties'],find_center_point(data.geometry.coordinates[0]))\n  ))\n  */\n\n  // Initialize our map\n  useEffect(() => {\n\n    var initMap = null\n    // You can store the map instance with useRef too\n    const map = new mapboxgl.Map({\n      container: mapboxElRef.current,\n      style: \"mapbox://styles/kynantly/ck94r7t9m0e7b1iqpq4y20drq\",\n      center: new mapboxgl.LngLat.convert([-114.066666,51.049999]), // initial geo location\n      zoom: 10 // initial zoom\n    });\n\n    const geocoder = new MapboxGeocoder({\n      accessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n      placeholder: 'Search for your address',\n      zoom: 10,\n      mapboxgl: mapboxgl\n    });\n\n    //var searchBar = document.getElementById('searchbar')\n    //searchBar.appendChild(geocoder.onAdd(map));\n    map.addControl(geocoder);\n    // When map is loaded \n    map.once(\"load\", function() {\n\n      //map.addControl(geocoder, 'bottom-left');\n\n      // Add Boundary Source\n      map.addSource(\"municipality\", {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: localAreaBound.data\n        }\n      })\n\n      // Add Boundary Layer\n      map.addLayer({\n        id: \"municipalityBorder\",\n        source: \"municipality\", \n        type: \"line\",\n        paint: {\n          'line-color' : '#2d03ff',\n          'line-opacity': 0.7\n        }\n      })\n\n      // Add the sources for all the data\n      for (var i = 0; i < dataList.length; i++){\n        \n        var tempString = \"AlbertaCOVID-\" + dates[i]\n        \n        map.addSource(tempString, {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: mergeAlbertaCases(dataList[i]).data\n          }\n        })\n  \n        // Set default visibility to none\n        map.addLayer({\n          id: tempString,\n          source: tempString, \n          type: \"fill\",\n          'layout': {\n            'visibility': 'none'\n            },\n          paint: {\n            'fill-color' : [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"active\"],\n              1, \"#ffffb2\",\n              5, '#feb24c',\n              50, '#fc4e2a',\n              100, '#b10026'\n            ],\n            'fill-opacity': [\n              \"interpolate\",\n              [\"linear\"],\n              [\"get\", \"active\"],\n              0, 0,\n              5, 0.2,\n              50, 0.4,\n              100, 0.7\n            ]\n          }\n        })\n      }//end for loop\n\n      // Add hover event to display COVID data information\n      // Municipality Name\n      let oldhoverMunID\n\n      // Mouse move event\n      map.on(\"mousemove\", \"AlbertaCOVID-April_29\", e => {\n          // Get ID\n        const hoverMunID = e.features[0].properties.local_geographic_area;\n        \n        // Prevent Repeats\n        if (hoverMunID !== oldhoverMunID) {\n          // Set new ID\n          oldhoverMunID = hoverMunID;\n        \n          // Properties to display\n          const activeCase  = e.features[0].properties.active\n          const recoverCase = isNaN(((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)\n          const mortalityRate = isNaN(((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)\n\n          // Display to municipality detail screen\n          setselectedMunDetail(`\n                <p>Geographical Location: ${hoverMunID}</p>\n                <p>Current Active Case: <b>${activeCase}</b></p>\n                <p>Recovery Rate  (out of ${e.features[0].properties.cases}): <b>${recoverCase}%</b></p>\n                <p>Mortality Rate (out of ${e.features[0].properties.cases}): <b>${mortalityRate}%</b></p>\n                `)\n        \n        }//end if\n      })//end Mouse Event April 29\n\n      map.on(\"mousemove\", \"AlbertaCOVID-May_6\", e => {\n        // Get ID\n      const hoverMunID = e.features[0].properties.local_geographic_area;\n      \n      // Prevent Repeats\n      if (hoverMunID !== oldhoverMunID) {\n        // Set new ID\n        oldhoverMunID = hoverMunID;\n      \n        // Properties to display\n        const activeCase  = e.features[0].properties.active\n        const recoverCase = isNaN(((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.recovered / e.features[0].properties.cases) * 100).toFixed(2)\n        const mortalityRate = isNaN(((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)) ? 0.00 : ((e.features[0].properties.death_s / e.features[0].properties.cases) * 100).toFixed(2)\n\n        // Display to municipality detail screen\n        setselectedMunDetail(`\n              <p>Local Geographical Location: ${hoverMunID}</p>\n              <p>Current Active Case: <b>${activeCase}</b></p>\n              <p>Recovery Rate (out of ${e.features[0].properties.cases}): <b>${recoverCase}%</b></p>\n              <p>Mortality Rate (out of ${e.features[0].properties.cases}): <b>${mortalityRate}%</b></p>\n              `)\n      \n      }//end if\n    })//end Mouse Event May 6\n\n      // List of Markers for the filter to add to map\n      var hopsitalMarkerList = []\n      var outbreakMarkerList = []\n\n      // Add Hospital Filter\n      var hospitalFilter = document.getElementById(\"hospitalfilter\")\n      var hospitalToggle = false \n\n      hospitalFilter.addEventListener('change', function(e) {\n        \n        if (hospitalToggle === true){\n          if (hopsitalMarkerList.length !== 0){\n            for(var i = 0; i < hopsitalMarkerList.length; i++){\n              hopsitalMarkerList[i].remove()\n            }\n            hopsitalMarkerList = []\n          }\n          hospitalToggle = false\n        } else {\n          hospitalData.hospitals.forEach(function(marker) {\n\n            // create a HTML element for each feature\n            var el = document.createElement('div')\n            el.className = 'markerHospital'\n            el.id = 'hospital'\n    \n            // make a marker for each feature and add to the map\n            var tempMarker = new mapboxgl.Marker(el)\n              .setLngLat(marker.geometry.coordinates)\n              .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n                .setHTML(`<h3> ${marker.properties.NAME} </h3><p> Relevant Information ${marker.properties.maskAmount} </p>`))\n              .addTo(map)\n              \n            tempMarker.addTo(map)\n            hopsitalMarkerList.push(tempMarker)\n          })//end forEach hospital\n          hospitalToggle = true\n        }//end if\n        \n      }) // end Hospital Marker\n\n      // Outbreak marker\n      var OutbreakFilter = document.getElementById(\"outbreakfilter\")\n      var OutbreakToggle = false \n\n      OutbreakFilter.addEventListener('change', function(e) {\n        \n        if (OutbreakToggle === true){\n          if (outbreakMarkerList.length !== 0){\n            for(var i = 0; i < outbreakMarkerList.length; i++){\n              outbreakMarkerList[i].remove()\n            }\n            outbreakMarkerList = []\n          }\n          OutbreakToggle = false\n        } else {\n          outbreakData.outbreak.forEach(function(marker) {\n\n            // create a HTML element for each feature\n            var el = document.createElement('div')\n            el.className = 'markerOutbreak'\n            el.id = 'outbreak'\n    \n            // make a marker for each feature and add to the map\n            var tempMarker = new mapboxgl.Marker(el)\n              .setLngLat(marker.geometry.coordinates)\n              .setPopup(new mapboxgl.Popup({ offset: 25 }) // add popups\n                .setHTML(`<h3> ${marker.properties.NAME} </h3><p> ${marker.properties.TYPEFACILITY} </p>`))\n              .addTo(map)\n              \n            tempMarker.addTo(map)\n            outbreakMarkerList.push(tempMarker)\n          })//end forEach outbreak\n          OutbreakToggle = true\n        }// end if\n        \n      }) // end Outbreak Marker\n\n      // Add Date slider\n      var sliderFilter = document.getElementById(\"dataslider\")\n\n      // Add input change listener\n      sliderFilter.addEventListener('input', function(e) {\n\n        var dateTarget = parseInt(e.target.value, 10);\n\n        document.getElementById('filterDate').textContent = dates[dateTarget].replace(\"_\", \" \");;\n\n        initMap = filterBy(dateTarget)\n\n        // Change the visibility of layers based on the slider value\n        for (var i =0; i < dates.length; i++){\n          var tempString = \"AlbertaCOVID-\" + dates[i]\n          if (i === dateTarget){\n            map.setLayoutProperty(tempString,'visibility','visible');\n          } else {\n            map.setLayoutProperty(tempString,'visibility','none');\n          }\n        }//end for loop\n        setselectedLegDetail(legendBuild(filterBy(dateTarget).data))\n \n      })// end slider filter\n\n    })//end map.on load\n    \n    // Add navigation controls to the top right of the canvas\n    var nav = new mapboxgl.NavigationControl();\n    map.addControl(nav, 'bottom-right');\n\n  }, [])// End use effect\n\n  return (\n    <div className=\"App\">\n      <div className=\"mapContainer\">\n        {/* Assigned Mapbox container */}\n        <div className=\"mapBox\" ref={mapboxElRef} />\n      </div>\n      <div className=\"information\">\n        <div className=\"map-overlay\" id='features'>\n          <h2>COVID Statistics</h2>\n          {Parser(selectedMunDetail)}\n        </div>\n        <div className=\"map-overlay\" id='features'>\n          <label id=\"filterDate\">Date Range</label>\n          <input type=\"range\" id=\"dataslider\" min=\"0\" max=\"1\" step=\"1\"></input>\n        </div>\n        <div className=\"legend\">\n          <h4>Active COVID Case</h4>\n          {Parser(selectedLegDetail)}\n        </div>\n      </div>\n      <nav className=\"filter-group\">\n        <input type=\"checkbox\" id=\"hospitalfilter\"></input>\n        <label htmlFor=\"hospitalfilter\">Hospital</label>\n        <input type=\"checkbox\" id=\"outbreakfilter\"></input>\n        <label htmlFor=\"outbreakfilter\">Outbreak</label>\n        </nav>\n     \n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}